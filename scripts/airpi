#!/bin/bash

### BEGIN INIT INFO
# Provides:          airpi
# Required-Start:    $local_fs
# Required-Stop:     $local_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Service to auto-launch airodump-ng.
# Description:       Service to auto-launch airodump-ng. 
#                    Allows wifi dumping to start at boot.
### END INIT INFO

# /etc/init.d/airpi: start and stop the airpi daemon

# Source config if available.  Safe defaults otherwise.
[ -e '/etc/airpi.conf' ] && . /etc/airpi.conf

# Process' files
PREFIX=`date +%y%m%d%H%M`
PIDFILE='/var/run/airpi.pid'
DATA=${DATA:-'/var/opt/airpi/'}

[ -d $DATA ] || mkdir -p $DATA

# Airpi expects exclusive control of monitor devices
monitoring() {
  /usr/sbin/airmon-ng | grep -iP "^mon[0-9]+"
  ([ $? == "0" ] && return 0) || return 1
}

start() {
  monitoring
  [ $? == "0" ] && echo "airpi: requires exclusive control of monitor mode" && exit 1

  /usr/sbin/airmon-ng start $DEVICE 
  [ $? != "0" ] && echo "airpi: failed to start monitor mode on $DEVICE" && exit 2

  start-stop-daemon --pidfile $PIDFILE -m \
  -b -d $DATA \
  --start -x /usr/sbin/airodump-ng \
    -- -w $PREFIX \
    --berlin ${BERLIN:-60} \
    ${MANF:+-M} \
    ${UPTIME:+-U} \
    --output-format ${FORMAT:-csv} \
    mon0
}

stop() {
  pkill -9 airodump-ng
  airmon-ng stop mon0
}

case "$1" in
  start)
    start
    ;;
  stop)
    stop
    ;;
  restart|force-reload)
    stop
    start
    ;;
  status)
    ( pgrep airodump-ng && ps aux | grep -iP airodump-ng ) || echo "[Airpi]: Not running..."
    exit $?
    ;;
  *)
    echo $"Usage: $0 {start|stop|restart}"
    exit 1
esac
exit 0

